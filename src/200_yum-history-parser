#!/usr/bin/env bash

function yumHistoryParser
{
    OLD_IFS=$IFS
    IFS=$'\n'

    # Il faut fournir l'Id de la transaction yum à parser
    if [ -z "$YUM_HISTORY_ID" ];then
        echo -e "[$YELLOW ERROR $RESET] No yum transaction Id has been specified";
        return
    fi

    # On extrait tout le contenu de l'évènement dans un fichier
    TMP_EVENT_FILE="/tmp/.linupdate_${PROCID}_yum-history-parser.tmp"

    LC_ALL="en_US.UTF-8" yum history info "$YUM_HISTORY_ID" > "$TMP_EVENT_FILE"

    # Suppression de '**' si présent dans le fichier
    sed -i 's/**//g' "$TMP_EVENT_FILE"

    # Extrait la date et l'heure au format : Thu Mar 25 10:40:37 2021
    EVENT_DATE=$(grep "^Begin time" "$TMP_EVENT_FILE" | sed 's/  //g' | sed 's/Begin time : //g')
    # Extrait la date de la chaine précédemment récupéréé
    DATE_START=$(date -d "$EVENT_DATE" +'%Y-%m-%d')
    # Extrait l'heure de la chaine précédemment récupéréé
    TIME_START=$(date -d "$EVENT_DATE" +'%H:%M:%S')
    #DATE_END=$(echo "$EVENT" | grep "^End-Date:" | awk '{print $2}')
    #TIME_END=$(echo "$EVENT" | grep "^End-Date:" | awk '{print $3}')

    # Commande exécutée
    COMMAND=$(grep "^Command Line" $TMP_EVENT_FILE | sed 's/  / /g' | sed 's/Command Line ://g')

    # On reformate le fichier temporaire pour être sûr de ne garder que les paquets traités
    sed -i -n '/Packages Altered/,$p' "$TMP_EVENT_FILE"

    LINES=$(egrep "^ +Install |^ +Dep-Install |^ +Updated |^ +Update |^ +Obsoleting |^ +Erase |^ +Downgrade |^ +Reinstall" "$TMP_EVENT_FILE")
    echo "$LINES" > "$TMP_EVENT_FILE"

    PACKAGES_INSTALLED_JSON=""
    DEPENDENCIES_INSTALLED_JSON=""
    PACKAGES_UPGRADED_JSON=""
    PACKAGES_REMOVED_JSON=""
    PACKAGES_DOWNGRADED_JSON=""
    PACKAGES_REINSTALLED_JSON=""
    YUM_HISTORY_PARSER_RETURN=""

    for LINE in $(cat "$TMP_EVENT_FILE");do

        if echo "$LINE" | egrep -q "^ +Install ";then
            PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

            # If package name starts with '@', ignore it as it's a group
            if echo "$PACKAGE_NAME" | grep -q "^@";then
                continue
            fi

            PACKAGE_VERSION=$(echo "$LINE" | awk '{print $2}' | sed "s/$PACKAGE_NAME//g" | sed 's/^-//g')
            REPO=$(echo "$LINE" | awk '{print $3}')
            PACKAGES_INSTALLED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\",\"repo\":\"$REPO\"},"
        fi

        if echo "$LINE" | egrep -q "^ +Dep-Install ";then
            PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

            # If package name starts with '@', ignore it as it's a group
            if echo "$PACKAGE_NAME" | grep -q "^@";then
                continue
            fi

            PACKAGE_VERSION=$(echo "$LINE" | awk '{print $2}' | sed "s/$PACKAGE_NAME//g" | sed 's/^-//g')
            REPO=$(echo "$LINE" | awk '{print $3}')
            DEPENDENCIES_INSTALLED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\",\"repo\":\"$REPO\"},"
        fi

        if echo "$LINE" | egrep -q "^ +Updated ";then
            # Si la ligne suivante commence par un chiffre alors on peut récupérer la version
            # Sinon on ignore cette ligne
            if grep -A1 "^${LINE}" "$TMP_EVENT_FILE" | grep -v "$LINE" | awk '{print $2}' | grep -q "^[0-9]";then
                PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

                # If package name starts with '@', ignore it as it's a group
                if echo "$PACKAGE_NAME" | grep -q "^@";then
                    continue
                fi

                PACKAGE_VERSION=$(grep -A1 "^${LINE}" "$TMP_EVENT_FILE" | grep -v "$LINE" | awk '{print $2}')
                REPO=$(grep -A1 "^${LINE}" "$TMP_EVENT_FILE" | grep -v "$LINE" | awk '{print $3}')
                PACKAGES_UPGRADED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\",\"repo\":\"$REPO\"},"
            fi
        fi

        if echo "$LINE" | egrep -q "^ +Erase ";then
            PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

            # If package name starts with '@', ignore it as it's a group
            if echo "$PACKAGE_NAME" | grep -q "^@";then
                continue
            fi

            PACKAGE_VERSION=$(echo "$LINE" | awk '{print $2}' | sed "s/$PACKAGE_NAME//g" | sed 's/^-//g')
            PACKAGES_REMOVED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\"},"
        fi

        if echo "$LINE" | egrep -q "^ +Downgrade ";then
            PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

            # If package name starts with '@', ignore it as it's a group
            if echo "$PACKAGE_NAME" | grep -q "^@";then
                continue
            fi

            PACKAGE_VERSION=$(echo "$LINE" | awk '{print $2}' | sed "s/$PACKAGE_NAME//g" | sed 's/^-//g')
            PACKAGES_DOWNGRADED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\"},"
        fi

        if echo "$LINE" | egrep -q "^ +Reinstall ";then
            PACKAGE_NAME=$(echo "$LINE" | awk '{print $2}' | sed 's/-[0-9].*//g')

            # If package name starts with '@', ignore it as it's a group
            if echo "$PACKAGE_NAME" | grep -q "^@";then
                continue
            fi

            PACKAGE_VERSION=$(echo "$LINE" | awk '{print $2}' | sed "s/$PACKAGE_NAME//g" | sed 's/^-//g')
            REPO=$(echo "$LINE" | awk '{print $3}')
            PACKAGES_REINSTALLED_JSON+="{\"name\":\"$PACKAGE_NAME\",\"version\":\"$PACKAGE_VERSION\",\"repo\":\"$REPO\"},"
        fi
    done

    rm "$TMP_EVENT_FILE" -f

    if [ ! -z "$PACKAGES_INSTALLED_JSON" ];then
        # Suppression de la dernière virgule :
        PACKAGES_INSTALLED_JSON=$(echo "${PACKAGES_INSTALLED_JSON::-1}")
        # Création de l'array contenant les paquets installés, au format JSON
        PACKAGES_INSTALLED_JSON="\"installed\":[$PACKAGES_INSTALLED_JSON],"
    fi

    if [ ! -z "$DEPENDENCIES_INSTALLED_JSON" ];then
        # Suppression de la dernière virgule :
        DEPENDENCIES_INSTALLED_JSON=$(echo "${DEPENDENCIES_INSTALLED_JSON::-1}")
        # Création de l'array contenant les paquets installés, au format JSON
        DEPENDENCIES_INSTALLED_JSON="\"dep_installed\":[$DEPENDENCIES_INSTALLED_JSON],"
    fi

    if [ ! -z "$PACKAGES_UPGRADED_JSON" ];then
        # Suppression de la dernière virgule :
        PACKAGES_UPGRADED_JSON=$(echo "${PACKAGES_UPGRADED_JSON::-1}")
        # Création de l'array contenant les paquets mis à jour, au format JSON
        PACKAGES_UPGRADED_JSON="\"upgraded\":[$PACKAGES_UPGRADED_JSON],"
    fi

    if [ ! -z "$PACKAGES_REMOVED_JSON" ];then
        # Suppression de la dernière virgule :
        PACKAGES_REMOVED_JSON=$(echo "${PACKAGES_REMOVED_JSON::-1}")
        # Création de l'array contenant les paquets supprimés, au format JSON
        PACKAGES_REMOVED_JSON="\"removed\":[$PACKAGES_REMOVED_JSON],"
    fi

    if [ ! -z "$PACKAGES_DOWNGRADED_JSON" ];then
        # Suppression de la dernière virgule :
        PACKAGES_DOWNGRADED_JSON=$(echo "${PACKAGES_DOWNGRADED_JSON::-1}")
        # Création de l'array contenant les paquets rétrogradés, au format JSON
        PACKAGES_DOWNGRADED_JSON="\"downgraded\":[$PACKAGES_DOWNGRADED_JSON],"
    fi

    if [ ! -z "$PACKAGES_REINSTALLED_JSON" ];then
        # Suppression de la dernière virgule :
        PACKAGES_REINSTALLED_JSON=$(echo "${PACKAGES_REINSTALLED_JSON::-1}")
        # Création de l'array contenant les paquets rétrogradés, au format JSON
        PACKAGES_REINSTALLED_JSON="\"reinstalled\":[$PACKAGES_REINSTALLED_JSON],"
    fi

    # Si des paquets ont été parsé pour cet évènement alors on va pouvoir générer un JSON
    if [ ! -z "$PACKAGES_INSTALLED_JSON" ] || [ ! -z "$DEPENDENCIES_INSTALLED_JSON" ] || [ ! -z "$PACKAGES_UPGRADED_JSON" ] || [ ! -z "$PACKAGES_REMOVED_JSON" ] || [ ! -z "$PACKAGES_DOWNGRADED_JSON" ] || [ ! -z "$PACKAGES_REINSTALLED_JSON" ];then
        # Construction de l'évènement au format JSON :
        # D'abord on renseigne la date et l'heure de début / fin
        JSON="{\"date_start\":\"$DATE_START\",\"date_end\":\"$DATE_END\",\"time_start\":\"$TIME_START\",\"time_end\":\"$TIME_END\",\"command\":\"$COMMAND\","

        # Puis on ajoute les paquets installés si il y en a eu
        if [ ! -z "$PACKAGES_INSTALLED_JSON" ];then
            JSON+="$PACKAGES_INSTALLED_JSON"
        fi

        # Puis on ajoute les dépendances installées si il y en a eu
        if [ ! -z "$DEPENDENCIES_INSTALLED_JSON" ];then
            JSON+="$DEPENDENCIES_INSTALLED_JSON"
        fi

        # Puis on ajoute les paquets mis à jour si il y en a eu
        if [ ! -z "$PACKAGES_UPGRADED_JSON" ];then
            JSON+="$PACKAGES_UPGRADED_JSON"
        fi

        # Puis on ajoute les paquets supprimés si il y en a eu
        if [ ! -z "$PACKAGES_REMOVED_JSON" ];then
            JSON+="$PACKAGES_REMOVED_JSON"
        fi

        # Puis on ajoute les paquets rétrogradés si il y en a eu
        if [ ! -z "$PACKAGES_DOWNGRADED_JSON" ];then
            JSON+="$PACKAGES_DOWNGRADED_JSON"
        fi

        # Puis on ajoute les paquets réinstallés si il y en a eu
        if [ ! -z "$PACKAGES_REINSTALLED_JSON" ];then
            JSON+="$PACKAGES_REINSTALLED_JSON"
        fi

        # Suppression de la dernière virgule après le dernier array ajouté ( ], <= ici)
        JSON=$(echo "${JSON::-1}")

        # Fermeture de l'évènement en cours avant de passer au suivant (début de la boucle FOR)
        JSON+="}"

        # On retourne le JSON de l'évènement parsé
        # YUM_HISTORY_PARSER_RETURN=$(echo "$JSON" | jq .)
        YUM_HISTORY_PARSER_RETURN="$JSON"
    fi

    IFS=$OLD_IFS
}