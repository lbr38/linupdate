#!/usr/bin/env bash

# This function is executed just before packages update.
# It checks if packages to exclude have been specified in the configuration file and, if so, then exclude them if needed.

function checkPackagesBeforeUpdate
{
    if [ "$OS_FAMILY" == "Redhat" ];then
        # Clean yum cache
        yum clean all -q
    fi
    if [ "$OS_FAMILY" == "Debian" ];then
        # Clean and reload apt cache
        apt-get clean && apt-get -qq --allow-releaseinfo-change update
    fi

    echo -e "\n Generating packages list..."

    # Temporary file to work with
    CHECK_UPDATE_TMP="/tmp/linupdate_check-update.tmp"

    # List packages available for update
    if [ "$OS_FAMILY" == "Redhat" ];then
        if [ -f "/usr/bin/dnf" ];then
            dnf repoquery -q --upgrades --latest-limit 1 -a --qf="%{name} %{version}-%{release}.%{arch} %{repoid}" --upgrades >> "$CHECK_UPDATE_TMP"
        else
            repoquery -a --qf="%{name} %{version}-%{release}.%{arch} %{repoid}" --pkgnarrow=updates > "$CHECK_UPDATE_TMP"
        fi
    fi
    if [ "$OS_FAMILY" == "Debian" ];then
        aptitude -F"%p %V %v" --disable-columns search ~U > "$CHECK_UPDATE_TMP"
    fi

    # Add the available packages list in an array, it could be needed for others operations
    OLD_IFS=$IFS
    PACKAGES=()

    while IFS=$'\n' read -r LINE; do
        PACKAGES+=("$LINE")
    done < <(awk '{print $1}' "$CHECK_UPDATE_TMP")

    IFS=$OLD_IFS

    # If --ignore-exclude param has been set then ignore all packages exclusions that have been specified by the user
    if [ "$IGNORE_EXCLUDE" -eq "1" ];then
        echo -e "${YELLOW}--ignore-exclude${RESET} param is enabled, no exclusion will be taken into account."
        
        if [ "$OS_FAMILY" == "Debian" ];then
            # Get all packages that could have been holded (on another linupdate execution)
            HOLDED_PACKAGES=$(apt-mark showhold)

            # Then unhold them all
            if [ ! -z "$HOLDED_PACKAGES" ];then
                OLD_IFS=$IFS
                IFS=$'\n'

                for HOLDED_PACKAGE in $(echo "$HOLDED_PACKAGES");do
                    apt-mark unhold "$HOLDED_PACKAGE"
                done

                IFS="$OLD_IFS"
            fi
        fi
    fi

    # If --ignore-exclude param has NOT been set, then check if some packages need to be excluded from packages update
    if [ "$IGNORE_EXCLUDE" -eq "0" ];then
        # Gestion des exclusions de paquets
        #
        # Exemple pour illustrer le fonctionnement :
        #
        # Extrait de linupdate.conf :                      Extrait de /tmp/linupdate_check-update.tmp (liste des paquets disponibles pour mise à jour, généré avec repoquery)
        #   EXCLUDE_MAJOR="httpd.*,php.*"                  php-cli.x86_64          7.1.10.xxx  updates
        #   EXCLUDE="kernel.*,"                            php-common.x86_64       7.1.10.xxx  updates
        #   ...                                            ...
        #    
        #   Lorsqu'on utilise un wildcard (par exemple php.*), le 
        #   script va vérifier le nb d'occurences dans le fichier
        #   /tmp/linupdate_check-update.tmp (dans cet exemple 2 occurences
        #   php-cli et php-common). Le script devra vérifier que 
        #   pour ces deux paquets à mettre à jour si il s'agit d'une
        #   maj majeure ou non. Si php.* serait renseigné dans 
        #   EXCLUDE= alors le script excluerai les deux occurences 
        #   trouvées quoi qu'il arrive.

        # Process packages to exclude on major release update (EXCLUDE_MAJOR):
        if [ ! -z "$PACKAGES_EXCLUDE_MAJOR" ];then

            PACKAGES_EXCLUDE_MAJOR_ARRAY=""
            IFS=','

            # Inject exclusion list into PACKAGES_EXCLUDE_MAJOR_ARRAY
            read -ra PACKAGES_EXCLUDE_MAJOR_ARRAY <<< "$PACKAGES_EXCLUDE_MAJOR"
            
            # Run through all packages in PACKAGES_EXCLUDE_MAJOR_ARRAY
            # For each package name, check if an update is available by looking in $CHECK_UPDATE_TMP
            for PACKAGE in "${PACKAGES_EXCLUDE_MAJOR_ARRAY[@]}"; do

                # If package occurence is found in $CHECK_UPDATE_TMP, then it means that an update is available for this package
                # We will have to check if it is a major release update or a minor release update
                if egrep -q "^${PACKAGE} " $CHECK_UPDATE_TMP;then
                    
                    # Save the actual IFS (comma) because it will be needed again by the previous FOR loop 
                    OLD_IFS=$IFS
                    IFS=$'\n'
    
                    # For every occurence of the package found in $CHECK_UPDATE_TMP (there could be more than one),
                    # check if its available upsate is a major release or a minor release update
                    for OCCURENCE in $(egrep "^${PACKAGE} " $CHECK_UPDATE_TMP | awk '{print $1}');do

                        echo -e "${YELLOW} ⚠ ${OCCURENCE}:$RESET"

                        # Get package exact name
                        PKG_NAME=$(egrep "^${OCCURENCE} " "$CHECK_UPDATE_TMP" | awk '{print $1}')

                        # And its available release version
                        PKG_VER=$(egrep "^${OCCURENCE} " "$CHECK_UPDATE_TMP" | awk '{print $2}')
                        
                        # Get the package actual release version that is installed on the system

                        # If Debian
                        if [ "$OS_FAMILY" == "Debian" ];then
                            PKG_ACTUAL_VERSION=$(egrep "^${OCCURENCE} " "$CHECK_UPDATE_TMP" | awk '{print $3}')
                        fi
                        # If RHEL
                        if [ "$OS_FAMILY" == "Redhat" ];then
                            PKG_ACTUAL_VERSION=$(rpm -qi $OCCURENCE | grep Version | head -n1 | awk '{print $3}')
                            PKG_RELEASE=$(rpm -qi $OCCURENCE | grep Release | head -n1 | awk '{print $3}')
                            # Concatenate both 
                            PKG_ACTUAL_VERSION="${PKG_ACTUAL_VERSION}-${PKG_RELEASE}"
                        fi

                        # If one of the variables is empty then print an error because we have not all the necessary informations to check if it's a major or minor update 
                        # In doubt, the package will be excluded to avoid any problem
                        if [ -z "$PKG_NAME" ] || [ -z "$PKG_VER" ] || [ -z "$PKG_ACTUAL_VERSION" ];then
                            echo -e "[$RED ERROR $RESET] while checking ${YELLOW}${OCCURENCE}${RESET} package. It will be excluded from update."

                            # Add the package name to the final exclude list
                            UPDATE_EXCLUDE+=" $OCCURENCE"
                        fi

                        # Parsing and comparing retrieved release version
                        # ex : 9.2.24-1.el7_5
                        #      |_______
                        #              |
                        # If first number does not change, then it is not a major update but a minor update that should not be problematic.
                        # Else (if the first number is different), it is a major update
                        PARSE_PKG_VER="$(echo "$PKG_VER" | awk -F. '{print $1}')"
                        PARSE_PKG_ACTUAL_VERSION="$(echo "$PKG_ACTUAL_VERSION" | awk -F. '{print $1}')"

                        # Cas it is a major update
                        if [ "$PARSE_PKG_VER" != "$PARSE_PKG_ACTUAL_VERSION" ];then 
                            echo -e "  [$YELLOW WARNING $RESET] A major release version is available for this package"
                            echo -e "   → Current version   : ${YELLOW}${PKG_ACTUAL_VERSION}${RESET}"
                            echo -e "   → Available version : ${YELLOW}${PKG_VER}${RESET}"

                            # Add the package name to the final exclude list
                            UPDATE_EXCLUDE+=" $OCCURENCE"

                        # Case it is a minor update: just print a message
                        else
                            echo -e "  An update is available for this package but no major release version (Current version: $PKG_ACTUAL_VERSION / Avail. version: $PKG_VER)."
                        fi
                    done
                    
                    # Set back the prviously saved IFS (comma) for the previous FOR loop to work
                    IFS=$OLD_IFS

                # Cas no update is available for this package
                else
                    echo -e "${YELLOW} ⚠ ${PACKAGE} :$RESET" &&
                    echo -e "  No available update for this package."
                fi
            done
        fi

        # Process packages to exclude no matter the release update, they always have to be excluded.
        if [ ! -z "$PACKAGES_EXCLUDE" ];then

            PACKAGES_EXCLUDE_ARRAY=""
            IFS=','

            # Inject exclusion list into PACKAGES_EXCLUDE_ARRAY
            read -ra PACKAGES_EXCLUDE_ARRAY <<< "$PACKAGES_EXCLUDE"

            # Run through all packages in PACKAGES_EXCLUDE
            # For each package name, check if an update is available by looking in $CHECK_UPDATE_TMP
            for PACKAGE in "${PACKAGES_EXCLUDE_ARRAY[@]}";do

                # If package occurence is found in $CHECK_UPDATE_TMP, then it means that an update is available for this package
                # It will be excluded
                if egrep -q "^${PACKAGE} " $CHECK_UPDATE_TMP;then

                    # Save the actual IFS (comma) because it will be needed again by the previous FOR loop 
                    OLD_IFS=$IFS
                    IFS=$'\n'
                    
                    # For every occurence of the package found in $CHECK_UPDATE_TMP (there could be more than one),
                    # add it to the final exclude list
                    for OCCURENCE in $(egrep "^${PACKAGE} " $CHECK_UPDATE_TMP | awk '{print $1}');do
                        UPDATE_EXCLUDE+=" $OCCURENCE"
                    done
        
                    # Set back the prviously saved IFS (comma) for the previous FOR loop to work
                    IFS=$OLD_IFS
                fi
            done
        fi
    fi

    # Finalize the list by adding a white space in the end to be sure the last package in the list will be taken into account when processing exclusion from this list
    if [ ! -z "$UPDATE_EXCLUDE" ];then
        UPDATE_EXCLUDE="${UPDATE_EXCLUDE} "
        # Delete leading white space
        UPDATE_EXCLUDE=$(echo "$UPDATE_EXCLUDE" | sed -e 's/^[[:space:]]*//')
    fi

    # Process services that will need a restart after packages update
    if [ ! -z "$SERVICE_RESTART" ];then
        OLD_IFS=$IFS
        IFS=','

        # Inject services list into SERVICES_TO_RESTART
        read -ra SERVICES_TO_RESTART <<< "$SERVICE_RESTART"

        # Run through SERVICES_TO_RESTART
        for SERVICE in "${SERVICES_TO_RESTART[@]}"; do
            # If service restart is conditionned by a specific package update, then get the package name, e.g:
            # httpd:ca-certificates => httpd service will be restarted if ca-certificates package is updated
            if echo "$SERVICE" | grep -q ":"; then
                SERVICE_CONDITIONNAL_PACKAGE_NAME=$(echo "$SERVICE" | awk -F: '{print $2}')
                SERVICE=$(echo "$SERVICE" | awk -F: '{print $1}')

                # If conditionnal package is empty, ignore this service and continue
                if [ -z "$SERVICE_CONDITIONNAL_PACKAGE_NAME" ];then
                    continue
                fi

                # Check if the package is in the list of packages that will be updated, if not then ignore this service and continue
                if ! printf '%s\n' "${PACKAGES[@]}" | grep -q "^${SERVICE_CONDITIONNAL_PACKAGE_NAME}$";then
                    continue
                fi
            fi

            # Check if specified service really exists, if yes, then add it to the final services to restart list
            if systemctl list-units --all -t service --full | grep -q "${SERVICE}.service";then
                # Also check if the service is active
                if systemctl is-active --quiet "$SERVICE";then
                    SERVICE_TO_BE_RESTARTED+=" $SERVICE"
                fi
            fi
        done

        SERVICE_TO_BE_RESTARTED="${SERVICE_TO_BE_RESTARTED} "
        SERVICE_TO_BE_RESTARTED="${SERVICE_TO_BE_RESTARTED/ /}"

        IFS=$OLD_IFS
    fi

    echo ""

    # Print all packages that will be excluded, if any
    if [ ! -z "$UPDATE_EXCLUDE" ];then
        echo -e "Following packages will be excluded from update: ${YELLOW}${UPDATE_EXCLUDE}${RESET}"
    fi

    # Print all services that will be restarted, if any
    if [ ! -z "$SERVICE_TO_BE_RESTARTED" ];then
        echo -e "Following services will be restarted after update: ${YELLOW}${SERVICE_TO_BE_RESTARTED}${RESET}"
    fi

    echo -e "\n$SEP\n"

    # If $CHECK_UPDATE_TMP is empty then there is no update available
    if [ ! -s "$CHECK_UPDATE_TMP" ];then
        echo -e "${YELLOW}No available package for update${RESET}\n"

        # Indicate that there is no need to execute apt/yum packages update
        SOMETHING_TO_UPDATE="false"

        return
    fi

    # Print packages that will be updated in columns
    if [ "$OS_FAMILY" == "Debian" ];then
        COLUMS_SIZE="%-40s %-20s %-45s %-45s\n"
        printf "$COLUMS_SIZE" " Package" "" "   Current version" "   Available version"
    fi
    if [ "$OS_FAMILY" == "Redhat" ];then
        COLUMS_SIZE="%-40s %-20s %-45s %-45s %-30s\n"
        printf "$COLUMS_SIZE" " Package" "" "   Current version" "   Available version" "   Repo"
    fi

    while read PACKAGE;do
        # Package name
        PKG_NAME=$(echo "$PACKAGE" | awk '{print $1}')

        # Package version update that is available and will be installed
        if [ "$OS_FAMILY" == "Redhat" ];then
            PKG_VER=$(echo "$PACKAGE" | awk '{print $2}')
        fi
        if [ "$OS_FAMILY" == "Debian" ];then
            PKG_VER=$(echo $PACKAGE | awk '{print $2}' | sed 's/(//g')
        fi

        # Package actual version that is installed on the system
        if [ "$OS_FAMILY" == "Redhat" ];then
            PKG_ACTUAL_VERSION=$(rpm -qi $PKG_NAME | grep Version | head -n1 | awk '{print $3}')
        fi
        if [ "$OS_FAMILY" == "Debian" ];then
            PKG_ACTUAL_VERSION=$(echo $PACKAGE | awk '{print $3}')
        fi

        # On RHEL, also get the actual package release and the repo from where the package will be updated
        if [ "$OS_FAMILY" == "Redhat" ];then 
            PKG_ACTUAL_RELEASE=$(rpm -qi $PKG_NAME | grep Release | head -n1 | awk '{print $3}')
            REPO=$(echo "$PACKAGE" | awk '{print $3}')
        fi

        # Now print the line with all the package informations
        # Columns size is different depending on whether the system is Debian or RHEL

        # Cas the package to print will be excluded, a "excluded" tag will be printed
        if echo "$UPDATE_EXCLUDE" | grep -q "$PKG_NAME ";then
            EXCLUDE_STATE="(excluded)"

            if [ "$OS_FAMILY" == "Redhat" ];then
                echo -ne "${RED} ✕ ${RESET}"
                printf "$COLUMS_SIZE" "$PKG_NAME" "$EXCLUDE_STATE" "${PKG_ACTUAL_VERSION}-${PKG_ACTUAL_RELEASE}" "$PKG_VER" "$REPO"
                echo -n ""
            fi
            if [ "$OS_FAMILY" == "Debian" ];then
                echo -ne "${RED} ✕ ${RESET}"
                printf "$COLUMS_SIZE" "$PKG_NAME" "$EXCLUDE_STATE" "$PKG_ACTUAL_VERSION" "$PKG_VER"
                echo -n ""
            fi
        else
            EXCLUDE_STATE=""
            if [ "$OS_FAMILY" == "Redhat" ];then
                echo -ne "${GREEN} ✔ ${RESET}"
                printf "$COLUMS_SIZE" "$PKG_NAME" "$EXCLUDE_STATE" "${PKG_ACTUAL_VERSION}-${PKG_ACTUAL_RELEASE}" "$PKG_VER" "$REPO"
                echo -n ""
            fi
            if [ "$OS_FAMILY" == "Debian" ];then
                echo -ne "${GREEN} ✔ ${RESET}"
                printf "$COLUMS_SIZE" "$PKG_NAME" "$EXCLUDE_STATE" "$PKG_ACTUAL_VERSION" "$PKG_VER"
                echo -n ""
            fi
        fi
        
    done < "$CHECK_UPDATE_TMP"

    echo -e "\n${SEP}\n"

    # If --check-updates param, then quit
    if [ "$ONLY_CHECK_UPDATE" == "true" ];then
        exit
    fi

    # If --assume-yes param has not been specified, then ask for confirmation before installing the printed packages update list
    if [ "$ASSUME_YES" == "0" ];then
        echo -ne "${YELLOW}→ Confirm installation (yes/no): $RESET"; read -p "" CONFIRM &&
        if [ "$CONFIRM" != "yes" ];then
            clean_exit
        fi
    fi
}