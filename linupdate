#!/usr/bin/env bash

export LC_ALL="en_US.UTF-8"
export TERM="xterm-256color"


## ↓ VARIABLES ↓ ##
BASE_DIR="/opt/linupdate"
DATE_DMY=$(date +%d-%m-%Y)                          # Today date in 'DD-MM-YYYY' format
DATE_YMD=$(date +%Y-%m-%d)                          # Today date in 'YYYY-MM-DD' format
DATE_FULL=$(date +%d-%m-%Y_%Hh%M)                   # Today date in 'DD-MM-YYYY_hh-mm' format
TIME=$(date +%H:%M)                                 # Time in '00:00' format
TIME_FULL=$(date +%Hh%Mm%Ss)                        # Time in '00h00m00s' format
LINUPDATE="${BASE_DIR}/linupdate"                   # Main program
SRC_DIR="${BASE_DIR}/.src"                          # Source code directory
LOGS_DIR="/var/log/linupdate"                       # Logs directory
ETC_DIR="/etc/linupdate"                            # Configuration files directory
CONF="${ETC_DIR}/linupdate.conf"                    # Main configuration file
MODULES_DIR="${BASE_DIR}/mods-available"            # Available modules directory
MODULES_ENABLED_DIR="${BASE_DIR}/mods-enabled"      # Enabled modules directory
AGENTS_ENABLED_DIR="${BASE_DIR}/agents-enabled"     # Enabled agents directory
MODULES_CONF_DIR="${ETC_DIR}/modules"               # Modules configuration files directory
SERVICE_DIR="${BASE_DIR}/service"                   # Main agent/service directory
LINUPDATE_PARAMS="$@"
OS_NAME=""
OS_ID=""
OS_VERSION=""
OS_FAMILY=""
KERNEL=$(uname -r)
ARCH=$(uname -m)
VIRT_TYPE=""
PKG_MANAGER=""
PKG_TYPE=""
PROFILE=""
ENV=""
FAILLEVEL=""
MAIL_ENABLED=""
MAIL_RECIPIENT=""
PACKAGES_EXCLUDE_MAJOR=""
PACKAGES_EXCLUDE=""
SERVICE_RESTART=""
HISTORIQUE="${BASE_DIR}/linupdate.history"                     # Packages updates history file
REPORT="${DATE_YMD}_${TIME_FULL}_linupdate_${HOSTNAME}.log"    # Name of the log/report file
LOG="${LOGS_DIR}/${REPORT}"                                    # Location of the log/report file
LOG_REPORT_MAIL="/tmp/${REPORT}"                               # Same file but this one will be formated to be sent by mail (without ANSI characters)
APT_UPGRADE="upgrade"                                          # upgrade or dist-upgrade (default: upgrade)
APT_OPTIONS=""
YUM_OPTIONS=""
KEEP_OLDCONF="0"
UPDATE_ERROR="0"
SOMETHING_TO_UPDATE="true"
ONLY_CHECK_UPDATE="false"
IGNORE_EXCLUDE="0"
UPDATE_EXCLUDE=""
SERVICE_TO_BE_RESTARTED=""
READ_PACKAGES_TO_EXCLUDE=""
READ_PACKAGES_TO_EXCLUDE_MAJOR=""
ERROR_STATUS="0"
ASSUME_YES="0"
ONLY_UPDATE="0"
PROCID=$(echo "$RANDOM")
VERBOSE="0"
FROM_AGENT="0"
REBOOT_REQUIRED="false"

# Mods variables
MOD_ERROR="0"
LOADED_MODULES=""

# Terminal printing
# Colors:
WHITE=$(tput setaf 7)
GRAY=$(tput setaf 8)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)
# Bold version:
WHITEB=$(tput bold;tput setaf 7)
GRAYB=$(tput bold;tput setaf 8)
GREENB=$(tput bold;tput setaf 2)
REDB=$(tput bold;tput setaf 1)
YELLOWB=$(tput bold;tput setaf 3)
CYANB=$(tput bold;tput setaf 6)
# Separator
SEP=$(printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '=')

# Retrieve actual version
if [ -f "${BASE_DIR}/version" ];then
    VERSION=$(cat ${BASE_DIR}/version)
else
    VERSION=""
fi

# Detecting user
if [ "$(id -u)" -ne "0" ];then
    echo -e "\n${YELLOW}Must be executed with sudo ${RESET}\n"
    exit
fi

# Create lock file
if [ ! -f "/tmp/linupdate.lock" ];then
    touch "/tmp/linupdate.lock"
fi

# Create some base directories
mkdir -p "$ETC_DIR"
mkdir -p "$MODULES_CONF_DIR"
mkdir -p "$MODULES_DIR"
mkdir -p "$MODULES_ENABLED_DIR"
mkdir -p "$AGENTS_ENABLED_DIR"
mkdir -p "$SERVICE_DIR"

# If source code dir does not exist then quit
if [ ! -d "$SRC_DIR" ];then
    echo -e "[$YELLOW ERROR $RESET] Some linupdate core files are missing. You might reinstall linupdate."
    exit 1
fi

# Sourcing all files inside src dir
for SRC_FILE in $(ls -A1 "$SRC_DIR");do
    source "$SRC_DIR/$SRC_FILE"
done

# Check that system is valid before continue
checkSystem

# Generate config file if not exist
generateConf

# Patch 2.2.12
if [ -f "$CONF" ];then
    # Replace NEED_RESTART by SERVICE_RESTART
    sed -i "s/^NEED_RESTART/SERVICE_RESTART/g" "$CONF"
    # Remove ALLOW_SELF_UPDATE
    sed -i "/^ALLOW_SELF_UPDATE/d" "$CONF"
    # Replace "yes" by "true" in MAIL_ENABLED
    sed -i 's/^MAIL_ENABLED="yes"/MAIL_ENABLED="true"/g' "$CONF"
    # Replace "no" by "false" in MAIL_ENABLED
    sed -i 's/^MAIL_ENABLED="no"/MAIL_ENABLED="false"/g' "$CONF"
fi


## ↓ EXECUTION ↓ ##

# Params pre-check
# If --from-agent param is passed, then rewrite output log filename and make it hidden
if echo "$@" | grep -q "\-\-from\-agent";then
    REPORT=".${DATE_YMD}_${TIME_FULL}_linupdate_${HOSTNAME}-agent.log"
    LOG="${LOGS_DIR}/${REPORT}"
fi

# Create logs dir if not exist
mkdir -p "$LOGS_DIR"

# Create/clean logfile
echo -n> "$LOG"
chmod 660 "$LOG"

# Writing everything happening to the log file
exec &> >(tee -a "$LOG")

# Detect virtualization type
if [ -f "/usr/sbin/virt-what" ];then
    VIRT_TYPE=$(/usr/sbin/virt-what | tr '\n' ' ')
    if [ -z "$VIRT_TYPE" ];then
        VIRT_TYPE="Bare metal"
    fi
fi

while [ $# -ge 1 ];do
    case "$1" in
        --help|-h)
            help
            clean_exit
        ;;
        --version|-v|-V)
            echo "Version: ${YELLOW}$VERSION${RESET}"
            clean_exit
        ;;
        -vv|--vv)
            VERBOSE="1"
        ;;
        --force|--assume-yes)
            ASSUME_YES="1"
        ;;
        --profile|--type)
            # If nothing has been specified then print actual profile
            if [ -z "$2" ];then
                PROFILE=$(grep "^PROFILE=" $CONF | sed 's/PROFILE=//g' | sed 's/"//g')
                echo -e "Current profile: ${YELLOW}$PROFILE${RESET}"
            else
                # If a profile name has been specified then replace actual profile with it
                if grep -q "PROFILE=" $CONF;then
                    sed -i "s/PROFILE=.*/PROFILE=\"$2\"/g" $CONF &&
                    echo -e "Profil has been changed: ${YELLOW}$2${RESET}"
                fi
            fi
            clean_exit
        ;;
        --environment|--env)
            # If nothing has been specified then print actual env
            if [ -z "$2" ];then
                CURRENT_ENV=$(grep "^ENV=" $CONF | sed 's/ENV=//g' | sed 's/"//g')
                echo -e "Current environment: ${YELLOW}$CURRENT_ENV${RESET}"
            else
                # If an env name has been specified then replace actual env with it
                if grep -q "ENV=" $CONF;then
                    sed -i "s/ENV=.*/ENV=\"$2\"/g" $CONF &&
                    echo -e "Environment has been changed: ${YELLOW}$2${RESET}"
                fi
            fi
            clean_exit
        ;;
        --ignore-exclude|-ie)
            IGNORE_EXCLUDE=1
        ;;
        --check-updates|-cu)
            ONLY_CHECK_UPDATE="true"
            getConf
            checkPackagesBeforeUpdate
            clean_exit
        ;;
        --dist-upgrade|-du)
            APT_UPGRADE="dist-upgrade"
        ;;
        --keep-oldconf|-ko)
            export DEBIAN_FRONTEND="noninteractive"
            APT_OPTIONS='-o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"'
        ;;
        --exclude|-e)
            if [ ! -z "$2" ];then
                READ_PACKAGES_TO_EXCLUDE="$2"
            fi
            exclude
            clean_exit
        ;;
        --exclude-major|-em)
            if [ ! -z "$2" ];then
                READ_PACKAGES_TO_EXCLUDE="$2"
            fi
            READ_PACKAGES_TO_EXCLUDE_MAJOR="1"
            exclude
            clean_exit
        ;;
        --mod-enable|-mod-enable|-me)
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Enable module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_enable &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} enabled"
            clean_exit
        ;;
        --mod-disable|-mod-disable|-md)
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Disable module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_disable &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} disabled"
            clean_exit
        ;;
        --mod-configure|-mc|--mod-exec)
            getConf
            MODULE=$2
            shift
            if [ ! -f "${MODULES_DIR}/${MODULE}.mod" ];then
                echo "Error: unknown module ${YELLOW}${MODULE}${RESET}"
                clean_exit
            fi

            # Configure module
            source "${MODULES_DIR}/${MODULE}.mod"
            mod_configure $@ &&
            echo -e "Module ${YELLOW}${MODULE}${RESET} configured"
            clean_exit
        ;;
        --agent-start)
            startAgent
            clean_exit
        ;;
        --agent-stop)
            stopAgent
            clean_exit
        ;;
        --agent-restart)
            restartAgent
            clean_exit
        ;;
        --agent-enable)
            enableAgent
            clean_exit
        ;;
        --agent-disable)
            disableAgent
            clean_exit
        ;;
        --from-agent)
            FROM_AGENT="1"
        ;;
        *)
            echo "Unknown parameter: $1"
            help
            clean_exit
        ;;
    esac
    shift
done

echo -e "\n\n
 .__  .__                        .___       __          
 |  | |__| ____  __ ________   __| _/____ _/  |_  ____  
 |  | |  |/    \|  |  \____ \ / __ |\__  \\   __\/ __ \ 
 |  |_|  |   |  \  |  /  |_> > /_/ | / __ \|  | \  ___/ 
 |____/__|___|  /____/|   __/\____ |(____  /__|  \___  >
              \/      |__|        \/     \/          \/ 


 ${YELLOW}linupdate${RESET} - advanced package updater for linux distributions\n\n"

# Reading configuration file
getConf

# Check if a new linupdate release is available and update (if auto-update enabled)
# selfUpdate

# Loading modules
loadModules

# Execute pre-update modules
execPreModules

echo -e " Hostname:                     ${YELLOW}${HOSTNAME}${RESET}"
echo -e " OS:                           ${YELLOW}${OS_NAME} $OS_VERSION ${RESET}"
echo -e " Kernel:                       ${YELLOW}$KERNEL${RESET}"
if [ ! -z "$VIRT_TYPE" ];then
    echo -e " Virtualization:               ${YELLOW}${VIRT_TYPE}${RESET}"
fi
echo -e " Profile:                      ${YELLOW}${PROFILE}${RESET}"
echo -e " Environment:                  ${YELLOW}${ENV}${RESET}"
echo -e " Executed on:                  ${YELLOW}${DATE_DMY} ${TIME}${RESET}"
echo -ne " Executed by:                 ${YELLOW} "; whoami; echo -ne "${RESET}"
echo -ne " Execution method: "
if [ "$FROM_AGENT" == "1" ];then
    echo -e "            ${YELLOW}from linupdate agent${RESET}"
else
    if [ -t 0 ];then
        echo -e "            ${YELLOW}manual${RESET}"
    else
        echo -e "            ${YELLOW}automatic (no tty)${RESET}"
    fi
fi

# Check if some packages need to be excluded
checkPackagesBeforeUpdate

# Execute packages update
update

# Reactivate holded packages by apt-mark
if [ "$OS_FAMILY" == "Debian" ];then
    HOLDED_PACKAGES=$(apt-mark showhold)
    if [ ! -z "$HOLDED_PACKAGES" ];then
        OLD_IFS="$IFS"
        IFS=$'\n'
        for HOLDED_PACKAGE in $(echo "$HOLDED_PACKAGES");do
            apt-mark unhold "$HOLDED_PACKAGE"
        done
        IFS="$OLD_IFS"
    fi
fi

# Execute post-update modules
execPostModules

# Restarting services
restartService

if [ "$UPDATE_ERROR" -gt "0" ];then
    echo -e "\nOperation completed with errors\n"
else
    echo -e "\nOperation completed\n"
fi

# Check if a system reboot is required
checkRebootNeeded
if [ "$REBOOT_REQUIRED" == "true" ];then
    echo -e "${YELLOW}Reboot is required${RESET}\n"
fi

# Sending mail report
sendMail

clean_exit